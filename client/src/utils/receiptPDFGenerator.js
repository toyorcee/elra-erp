import jsPDF from "jspdf";
import "jspdf-autotable";

export const generateReceiptPDF = (receiptData, procurement) => {
  const doc = new jsPDF();

  // Set document properties
  doc.setProperties({
    title: `Receipt - ${procurement.poNumber || procurement.title}`,
    subject: "Item Receipt",
    author: "ELRA ERP System",
    creator: "ELRA ERP System",
  });

  // Add ELRA branding
  doc.setFontSize(24);
  doc.setTextColor(0, 51, 102); // ELRA primary color
  doc.text("ELRA", 20, 30);

  doc.setFontSize(12);
  doc.setTextColor(100, 100, 100);
  doc.text("Enterprise Resource Planning System", 20, 40);

  // Receipt header
  doc.setFontSize(18);
  doc.setTextColor(0, 0, 0);
  doc.text("ITEM RECEIPT", 20, 60);

  // Receipt details
  doc.setFontSize(10);
  doc.setTextColor(0, 0, 0);

  // Left column
  doc.text("Purchase Order:", 20, 80);
  doc.text("Supplier:", 20, 90);
  doc.text("Receipt Date:", 20, 100);
  doc.text("Receipt Number:", 20, 110);

  // Right column
  doc.text(procurement.poNumber || procurement.title, 80, 80);
  doc.text(procurement.supplier?.name || "N/A", 80, 90);
  doc.text(receiptData.receivedDate, 80, 100);
  doc.text(`REC-${Date.now().toString().slice(-6)}`, 80, 110);

  // Items table
  const tableData = receiptData.receivedItems.map((item, index) => [
    index + 1,
    item.name,
    item.orderedQuantity,
    item.receivedQuantity,
    `₦${new Intl.NumberFormat().format(item.unitPrice)}`,
    `₦${new Intl.NumberFormat().format(
      item.receivedQuantity * item.unitPrice
    )}`,
  ]);

  doc.autoTable({
    startY: 130,
    head: [
      ["#", "Item Name", "Ordered Qty", "Received Qty", "Unit Price", "Total"],
    ],
    body: tableData,
    theme: "grid",
    headStyles: {
      fillColor: [0, 51, 102],
      textColor: 255,
      fontSize: 10,
    },
    styles: {
      fontSize: 9,
    },
    columnStyles: {
      0: { cellWidth: 10 },
      1: { cellWidth: 60 },
      2: { cellWidth: 25 },
      3: { cellWidth: 25 },
      4: { cellWidth: 25 },
      5: { cellWidth: 25 },
    },
  });

  // Summary
  const finalY = doc.lastAutoTable.finalY + 10;

  doc.setFontSize(12);
  doc.setTextColor(0, 0, 0);
  doc.text("Summary:", 20, finalY);

  doc.setFontSize(10);
  doc.text("Total Items Received:", 20, finalY + 15);
  doc.text("Total Value Received:", 20, finalY + 25);

  const totalItems = receiptData.receivedItems.reduce(
    (sum, item) => sum + item.receivedQuantity,
    0
  );
  const totalValue = receiptData.receivedItems.reduce(
    (sum, item) => sum + item.receivedQuantity * item.unitPrice,
    0
  );

  doc.text(totalItems.toString(), 80, finalY + 15);
  doc.text(`₦${new Intl.NumberFormat().format(totalValue)}`, 80, finalY + 25);

  // Notes
  if (receiptData.receiptNotes) {
    doc.text("Notes:", 20, finalY + 45);
    doc.setFontSize(9);
    doc.setTextColor(100, 100, 100);

    // Split notes into multiple lines if too long
    const notesLines = doc.splitTextToSize(receiptData.receiptNotes, 170);
    doc.text(notesLines, 20, finalY + 55);
  }

  // Footer
  doc.setFontSize(8);
  doc.setTextColor(100, 100, 100);
  doc.text("Generated by ELRA ERP System", 20, 280);
  doc.text(new Date().toLocaleString(), 20, 285);

  return doc;
};

export const downloadReceiptPDF = (receiptData, procurement) => {
  const doc = generateReceiptPDF(receiptData, procurement);
  const filename = `Receipt_${
    procurement.poNumber || procurement.title
  }_${Date.now()}.pdf`;
  doc.save(filename);
};

export const getReceiptPDFBlob = (receiptData, procurement) => {
  const doc = generateReceiptPDF(receiptData, procurement);
  return doc.output("blob");
};
